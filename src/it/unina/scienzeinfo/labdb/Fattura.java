/*
 * Fattura.java
 *
 * Created on 13-giu-2009, 16.06.41
 */

package it.unina.scienzeinfo.labdb;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 *
 * @author Gruppo 3
 */
public class Fattura extends DBFrame {

    /** Creates new form Fattura */
    public Fattura() {
        initComponents();
        
        ImpostaPosizioneFinestra();//Gestione posizione della finestra
        setNomeTabella("fattura");
        setModalita(APPEND_QUERY); //Imposta la finestra per l'inserimento
        setFrameTable(tabFattura);//Inizializza la tabella nella finestra
    }

    public void setModalita(int modo) {
         
        super.setModalita(TICKET);
        switch (modo)
        {//Impostiamo la modalità di visualizzazione della finestra
            case APPEND_QUERY: //Inserimento

                tFornitore.setEnabled(true);
                tSDay.setEnabled(false);
                tData.setEnabled(false);
                bPopola.setEnabled(true);
                SimpleDateFormat sdf = new SimpleDateFormat("EEEE d/MMM/yyyy", Locale.ITALY);
                Date now = new Date();
                tData.setText(sdf.format(now));
                
                impostaCodice();
                
                impostaFattura();
                break;
            case BROWSE://Visualizzazione
                tFornitore.setEnabled(false);
                tSDay.setEnabled(false);
                tData.setEnabled(false);
                bPopola.setEnabled(false);
                break;
        }
    }

      /*Visualizza nei campi i dati della riga selezionata nella tabella*/
    protected void mostraDati()
    {
        try {
               tFornitore.setText(rs.getString("fornitore"));
               tSDay.setText(rs.getString("id_fattura"));
               tData.setText(rs.getString("data"));
               super.mostraDati();
        } catch (SQLException e) {
              mostraErrori(e);
        }
    }

    @Override
    /*Pulisce il contenuto dei campi nella finestra*/
    protected void pulisci() {
        tFornitore.setText("");

    }

     //Immette all'interno del campo codice, il massimo valore(+1) della colonna codice
    protected void impostaFattura() {
        String fattura;
        fattura=Database.leggiValore("select nvl(max(id_fattura)+1,1) from "+Database.schema+".Fattura where codice = (select max(codice) from "+Database.schema+".Fattura) and extract(YEAR from data) like extract(YEAR from SYSDATE)").toString();
        tSDay.setText(fattura);
    }

    //Invoca un oggetto di tipo Acquisto per iniziare la gestione degli elementi della fattura
    private void acquisto(int id_fattura) {
        Acquisto m;
        m = new Acquisto(id_fattura);
        m.setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bPopola = new javax.swing.JButton();
        tData = new javax.swing.JTextField();
        tFornitore = new javax.swing.JTextField();
        tSDay = new javax.swing.JTextField();
        jSDay = new javax.swing.JLabel();
        jFornire = new javax.swing.JLabel();
        jData = new javax.swing.JLabel();
        spFattura = new javax.swing.JScrollPane();
        tabFattura = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Fattura");

        bPopola.setText("Popola Fattura");
        bPopola.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPopolaActionPerformed(evt);
            }
        });

        jSDay.setText("Id_Fattura Giornaliero*");

        jFornire.setText("Fornitore*");

        jData.setText("Data*");

        tabFattura.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Codice", "Id_Fattura", "Data", "Fornitore"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        spFattura.setViewportView(tabFattura);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jFornire)
                        .addGap(97, 97, 97))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSDay)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tSDay, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                    .addComponent(tFornitore, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE))
                .addGap(89, 89, 89)
                .addComponent(jData)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(bPopola, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tData, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(114, 114, 114))
            .addComponent(spFattura, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 830, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(165, 165, 165)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jFornire)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tFornitore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jData)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tSDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSDay)
                    .addComponent(bPopola))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spFattura, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Azioni alla pressione del tasto Popola Fattura
    private void bPopolaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPopolaActionPerformed
        String controllo,controllo2;
        controllo=Database.leggiValore("select nvl(max(id_fattura)+1,1) from "+Database.schema+".Fattura").toString();
        Salva(evt);
        controllo2=Database.leggiValore("select nvl(max(id_fattura)+1,1) from "+Database.schema+".Fattura").toString();
        //Se il controllo va a buon fine si può invocare la classe vendita
        if(!controllo.matches(controllo2))
        {
           acquisto(Integer.valueOf(getTCodice().getText()).intValue());
        }
    }//GEN-LAST:event_bPopolaActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Fattura().setVisible(true);
            }
        });
    }

    @Override
     //Cerca a seconda dei dati inseriti all'interno della tabella
    protected PreparedStatement creaSelectStatement() {
        Connection con;
        PreparedStatement st=null;
        String Fornitore;
        Pattern pat;
        Matcher matc;
        int k=1;
        //Acquisizione dei campi nel form
        Fornitore=tFornitore.getText();
        super.creaSelectStatement();
        //Completamento della query a seconda dei campi riempiti
        query+=" where";

        if (Fornitore.length()>0)
        {
            if (Fornitore.indexOf("%")>=0)
                query+=" fornitore like ?";
            else
                query+=" fornitore = ?";
        }
        pat= Pattern.compile("where$|and$");
        matc =pat.matcher(query);
        query=matc.replaceAll("");
          /*Collegamento al database ed esecuzione della query, in modalità protetta
        da SQLInjection*/
        try {
            con=Database.getDefaultConnection();
            st=con.prepareStatement(query,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            if (Fornitore.length()>0)
            {
                st.setString(k++,Fornitore);
            }
        return st;
        } catch (SQLException e) {
            mostraErrori(e);
            return null;
        }
    }



    @Override
    /* Genera ed esegue la query per l'inserimento di un dato*/
    protected PreparedStatement getComandoInserimento(Connection c) throws SQLException {
        String query;
        PreparedStatement st = null;
        //Controllo del corretto inserimento dei dati
        if(ControllaInput(5,tFornitore.getText(),"S1toSize"))
        {
           query="insert into "+Database.schema+".Fattura(codice,id_fattura,data,Fornitore) values(?,?,SYSDATE,?)";
           st=c.prepareStatement(query);
           st.setInt(1,Integer.valueOf(getTCodice().getText()).intValue());
           st.setString(3,tFornitore.getText());
           st.setInt(2,Integer.valueOf(tSDay.getText()).intValue());
        }
        else
        {
           MostraMessaggioErrore("Il seguente dato è errato: \n -Fonitore");
        }
        return st;
    }

    @Override
    /* Genera ed esegue la query per la modifica di un dato(Non supportata)*/
    protected PreparedStatement getComandoAggiornamento(Connection c) throws SQLException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bPopola;
    private javax.swing.JLabel jData;
    private javax.swing.JLabel jFornire;
    private javax.swing.JLabel jSDay;
    private javax.swing.JScrollPane spFattura;
    private javax.swing.JTextField tData;
    private javax.swing.JTextField tFornitore;
    private javax.swing.JTextField tSDay;
    private javax.swing.JTable tabFattura;
    // End of variables declaration//GEN-END:variables

}
