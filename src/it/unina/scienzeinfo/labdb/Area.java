/*
 * Area.java
 *
 * Created on 29 aprile 2009, 8.48
 */

package it.unina.scienzeinfo.labdb;
import java.sql.*;
import java.util.regex.*;

/**
 * Classe che realizza la gestione delle aree,
 * con inserimento, modifica e cancellazione
 */
public class Area extends DBFrame {
    /* Invoca il costruttore di Area*/
    public Area() {
        initComponents();
        ImpostaPosizioneFinestra();//Gestione posizione della finestra
        setModalita(APPEND_QUERY); //Imposta la finestra per l'inserimento
        setFrameTable(tabArea); //Inizializza la tabella nella finestra
        setNomeTabella("area"); //Assegna il nome della tabella
    }
    
    /*Imposta a seconda della modalità di visualizzazione, gli elementi
     all'intero della finestra*/
    public void setModalita(int modo) {
        super.setModalita(modo);
        switch (modo)
        {
            case APPEND_QUERY: //Inserimento
                tNome.setEnabled(true);
                tResponsabile.setEnabled(true);
                tSuperlivello.setEnabled(true);
                tAltezza.setEnabled(true);
                tLunghezza.setEnabled(true);
                tProfondita.setEnabled(true);
                break;
            case BROWSE://Visualizzazione
                tNome.setEnabled(false);
                tResponsabile.setEnabled(false);
                tSuperlivello.setEnabled(false);
                tAltezza.setEnabled(false);
                tLunghezza.setEnabled(false);
                tProfondita.setEnabled(false);
                break;
            case UPDATE://Modifica
                tNome.setEnabled(true);
                tResponsabile.setEnabled(true);
                tSuperlivello.setEnabled(true);
                tAltezza.setEnabled(true);
                tLunghezza.setEnabled(true);
                tProfondita.setEnabled(true);
                break;
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JNome = new javax.swing.JLabel();
        tNome = new javax.swing.JTextField();
        spArea = new javax.swing.JScrollPane();
        tabArea = new javax.swing.JTable();
        tResponsabile = new javax.swing.JTextField();
        jResponsabile = new javax.swing.JLabel();
        jSuperlivello = new javax.swing.JLabel();
        tSuperlivello = new javax.swing.JTextField();
        jAltezza = new javax.swing.JLabel();
        jLunhezza = new javax.swing.JLabel();
        jProfondità = new javax.swing.JLabel();
        tAltezza = new javax.swing.JTextField();
        tLunghezza = new javax.swing.JTextField();
        tProfondita = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Area");
        setResizable(false);

        JNome.setText("Nome");

        tNome.setToolTipText("Stringa di soli caratteri maiuscoli e minuscoli");

        tabArea.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID_Area", "Nome", "Responsabile", "SuperLivello", "Altezza", "Lunghezza", "Profondità"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        spArea.setViewportView(tabArea);

        tResponsabile.setToolTipText("Inserire un codice impiegato esistente");

        jResponsabile.setText("Responsabile");

        jSuperlivello.setText("Superlivello");

        tSuperlivello.setToolTipText("Inserire un codice area esistente");

        jAltezza.setText("Altezza");

        jLunhezza.setText("Lunghezza");

        jProfondità.setText("Profondità");

        tAltezza.setToolTipText("Valore in cm,max 5 cifre");

        tLunghezza.setToolTipText("Valore in cm,max 5 cifre");

        tProfondita.setToolTipText("Valore in cm,max 5 cifre");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(19, 19, 19)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(JNome)
                            .add(jResponsabile)
                            .add(jSuperlivello))
                        .add(26, 26, 26)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(tNome)
                            .add(tResponsabile)
                            .add(tSuperlivello, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE))
                        .add(79, 79, 79)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jAltezza)
                            .add(jLunhezza)
                            .add(jProfondità))
                        .add(27, 27, 27)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(tProfondita)
                            .add(tLunghezza)
                            .add(tAltezza, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)))
                    .add(spArea, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 774, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(133, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(JNome)
                    .add(tNome, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jAltezza)
                    .add(tAltezza, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tResponsabile, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jResponsabile)
                    .add(jLunhezza)
                    .add(tLunghezza, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(7, 7, 7)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(tSuperlivello, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jSuperlivello))
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(tProfondita, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jProfondità)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(spArea, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 188, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*Visualizza nei campi i dati della riga selezionata nella tabella*/
    protected void mostraDati()
    {
        try {
               tNome.setText(rs.getString("Nome"));
               tResponsabile.setText(rs.getString("Responsabile"));
               tSuperlivello.setText(rs.getString("Id_padre"));
               tAltezza.setText(rs.getString("Altezza"));
               tLunghezza.setText(rs.getString("Lunghezza"));
               tProfondita.setText(rs.getString("Profondita"));
               super.mostraDati();
        } catch (SQLException e) {    
              mostraErrori(e);
        }
    }

    /*Pulisce il contenuto dei campi nella finestra*/
    protected void pulisci() {        
        super.pulisci();
        tNome.setText("");
        tResponsabile.setText("");
        tSuperlivello.setText("");
        tAltezza.setText("");
        tLunghezza.setText("");
        tProfondita.setText("");
    }    

    //Cerca a seconda dei dati inseriti all'interno della tabella
    protected PreparedStatement creaSelectStatement() {      
        Connection con;  
        PreparedStatement st=null; 
        String codice,Nome,Responsabile,Superlivello,Altezza,Profondita,Lunghezza;
        Pattern pat;
        Matcher matc;
        int k=1;
        super.creaSelectStatement();
        //Acquisizione dei campi nel form
        codice=getTCodice().getText();
        Nome=tNome.getText();
        Responsabile=tResponsabile.getText();
        Superlivello=tSuperlivello.getText();
        Altezza=tAltezza.getText();
        Lunghezza=tLunghezza.getText();
        Profondita=tProfondita.getText();
        //Completamento della query a seconda dei campi riempiti
        query+=" where";

        if (codice.length()>0) {
            query+=" codice= ? and";
        }        
        if (Nome.length()>0)
        {
            if (Nome.indexOf("%")>=0)
                query+=" nome like ? and";
            else
                query+=" nome = ? and";
        }
        if (Responsabile.length()>0)
        {
            if (Responsabile.indexOf("%")>=0)
                query+=" responsabile like ? and";
            else
                query+=" responsabile = ? and";
        }
        if (Superlivello.length()>0)
        {
            if(Superlivello.indexOf("%")>=0)
                 query+=" id_padre like ? and";
            else
                 query+=" id_padre = ? and";
        }
        if (Altezza.length()>0)
        {
            if(Altezza.indexOf("%")>=0)
                 query+=" altezza like ? and";
            else
                 query+=" altezza = ? and";
        }
        if (Lunghezza.length()>0)
        {
            if(Lunghezza.indexOf("%")>=0)
                 query+=" lunghezza like ? and";
            else
                 query+=" lunghezza = ? and";
        }
        if (Profondita.length()>0)
        {
            if(Profondita.indexOf("%")>=0)
                 query+=" profondita like ?";
            else
                 query+=" profondita = ?";
        }
        pat= Pattern.compile("where$|and$");
        matc =pat.matcher(query);
        query=matc.replaceAll("");

        /*Collegamento al database ed esecuzione della query, in modalità protetta
        da SQLInjection*/
        try {
            con=Database.getDefaultConnection();
            st=con.prepareStatement(query,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            
            if (codice.length()>0)
            {
                st.setInt(k++,Integer.valueOf(codice).intValue());
            }        
            if (Nome.length()>0)
            {
                st.setString(k++,Nome);
            }
            if (Responsabile.length()>0)
            {
                st.setInt(k++,Integer.valueOf(Responsabile).intValue());
            }
            if (Superlivello.length()>0)
            {
                st.setInt(k++,Integer.valueOf(Superlivello).intValue());
            }
            if (Altezza.length()>0)
            {
                st.setInt(k++,Integer.valueOf(Altezza).intValue());
            }
            if (Lunghezza.length()>0)
            {
                st.setInt(k++,Integer.valueOf(Lunghezza).intValue());
            }
            if (Profondita.length()>0)
            {
                st.setInt(k++,Integer.valueOf(Profondita).intValue());
            }
        return st;
        } catch (SQLException e) {
            mostraErrori(e);
            return null;
        }
    }                                      

    
    /* Genera ed esegue la query per l'inserimento di un dato*/
    protected PreparedStatement getComandoInserimento(Connection c)  throws SQLException {
        String query;
        PreparedStatement st = null;
        //Controllo del corretto inserimento dei dati
        if(ControllaInput(5,getTCodice().getText(),"N1toSize") &&
                ControllaInput(5,tResponsabile.getText(),"N0toSize") &&
                ControllaInput(5,tSuperlivello.getText(),"N0toSize") &&
                ControllaInput(5,tAltezza.getText(),"N0toSize") &&
                ControllaInput(5,tLunghezza.getText(),"N0toSize") &&
                ControllaInput(5,tProfondita.getText(),"N0toSize"))
        {
           query="insert into "+Database.schema+".Area(codice,Id_padre,Nome,Responsabile,Altezza,Lunghezza,Profondita) values(?,?,?,?,?,?,?)";
           st=c.prepareStatement(query);
           st.setInt(1,Integer.valueOf(getTCodice().getText()).intValue());
           if(tSuperlivello.getText().matches(""))
           {
              st.setString(2,tSuperlivello.getText());
           }
           else
           {
               st.setInt(2,Integer.valueOf(tSuperlivello.getText()).intValue());
           }
           st.setString(3,tNome.getText());
           if(tResponsabile.getText().matches(""))
           {
              st.setString(4,tResponsabile.getText());
           }
           else
           {
               st.setInt(4,Integer.valueOf(tResponsabile.getText()).intValue());
           }
           if(tAltezza.getText().matches(""))
           {
              st.setString(5,tAltezza.getText());
           }
           else
           {
               st.setInt(5,Integer.valueOf(tAltezza.getText()).intValue());
           }
           if(tLunghezza.getText().matches(""))
           {
              st.setString(6,tLunghezza.getText());
           }
           else
           {
               st.setInt(6,Integer.valueOf(tLunghezza.getText()).intValue());
           }
           if(tProfondita.getText().matches(""))
           {
              st.setString(7,tProfondita.getText());
           }
           else
           {
               st.setInt(7,Integer.valueOf(tProfondita.getText()).intValue());
           }
           
        }
        else
        {
           MostraMessaggioErrore("I seguenti campo sono errati: \n -Codice Reparto \n -Responsabile \n -Supelivello \n -Altezza \n -Lunghezza \n -Profondita");
        }

        return st;
    }
    /*Genera ed esegue la query per la modifica di un dato*/
    protected PreparedStatement getComandoAggiornamento(Connection c)  throws SQLException {
        String query;
        PreparedStatement st = null;
        //Controllo del corretto inserimento dei dati
        if(ControllaInput(5,tSuperlivello.getText(),"N0toSize") &&
                ControllaInput(5,tResponsabile.getText(),"N0toSize") &&
                ControllaInput(5,tAltezza.getText(),"N0toSize") &&
                ControllaInput(5,tLunghezza.getText(),"N0toSize") &&
                ControllaInput(5,tProfondita.getText(),"N0toSize"))
        {
           query="update "+Database.schema+".Area set id_padre=? , Nome=?,Responsabile=?, altezza=?,lunghezza=?,profondita=?  where codice=?";
           st=c.prepareStatement(query);
           st.setInt(7,Integer.valueOf(getTCodice().getText()).intValue());
           if(tSuperlivello.getText().matches(""))
           {
              st.setString(1,tSuperlivello.getText());
           }
           else
           {
               st.setInt(1,Integer.valueOf(tSuperlivello.getText()).intValue());
           }
           st.setString(2,tNome.getText());
           if(tResponsabile.getText().matches(""))
           {
              st.setString(3,tResponsabile.getText());
           }
           else
           {
               st.setInt(3,Integer.valueOf(tResponsabile.getText()).intValue());
           }
           if(tAltezza.getText().matches(""))
           {
              st.setString(4,tAltezza.getText());
           }
           else
           {
               st.setInt(4,Integer.valueOf(tAltezza.getText()).intValue());
           }
           if(tLunghezza.getText().matches(""))
           {
              st.setString(5,tLunghezza.getText());
           }
           else
           {
               st.setInt(5,Integer.valueOf(tLunghezza.getText()).intValue());
           }
           if(tProfondita.getText().matches(""))
           {
              st.setString(6,tProfondita.getText());
           }
           else
           {
               st.setInt(6,Integer.valueOf(tProfondita.getText()).intValue());
           }
        }
        else
        {
            MostraMessaggioErrore("I seguenti campo sono errati: \n -Responsabile \n -Supelivello \n -Altezza \n -Lunghezza \n -Profondita");
        }
        return st;
    }


    public static void main1(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Area().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel JNome;
    private javax.swing.JLabel jAltezza;
    private javax.swing.JLabel jLunhezza;
    private javax.swing.JLabel jProfondità;
    private javax.swing.JLabel jResponsabile;
    private javax.swing.JLabel jSuperlivello;
    private javax.swing.JScrollPane spArea;
    private javax.swing.JTextField tAltezza;
    private javax.swing.JTextField tLunghezza;
    private javax.swing.JTextField tNome;
    private javax.swing.JTextField tProfondita;
    private javax.swing.JTextField tResponsabile;
    private javax.swing.JTextField tSuperlivello;
    private javax.swing.JTable tabArea;
    // End of variables declaration//GEN-END:variables
   
}
